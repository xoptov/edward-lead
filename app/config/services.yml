# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    AppBundle\EventListener\UserSubscriber:
        tags: ['kernel.event_subscriber']

    AppBundle\EventListener\SecuritySubscriber:
        tags: ['kernel.event_subscriber']

    AppBundle\EventListener\SelectTypeSubscriber:
        arguments:
            $firewallMap: '@security.firewall.map'
        tags: ['kernel.event_subscriber']

    AppBundle\Security\Voter\TradeVoter:
        tags: ['security.voter']

    app.admin.user:
        class: AppBundle\Admin\UserAdmin
        arguments: [~, AppBundle\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Users }
        public: true
        calls:
            - [setUserManager, ['@AppBundle\Service\UserManager']]
    
    app.admin.country:
        class: AppBundle\Admin\CountryAdmin
        arguments: [~, AppBundle\Entity\Country, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Countries }
        public: true

    app.admin.region:
        class: AppBundle\Admin\RegionAdmin
        arguments: [~, AppBundle\Entity\Region, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Regions }
        public: true
    
    app.admin.city:
        class: AppBundle\Admin\CityAdmin
        arguments: [~, AppBundle\Entity\City,~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Cities }
        public: true
    
    app.admin.property:
        class: AppBundle\Admin\PropertyAdmin
        arguments: [~, AppBundle\Entity\Property,~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Properties }
        public: true

    app.admin.account:
        class: AppBundle\Admin\AccountAdmin
        arguments: [~, AppBundle\Entity\Account, AppBundle\Controller\Admin\AccountController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: Accounts }
        public: true

    app.admin.income_account:
        class: AppBundle\Admin\AccountAdmin
        arguments: [~, AppBundle\Entity\IncomeAccount, AppBundle\Controller\Admin\AccountController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Income Accounts' }
        public: true

    app.admin.outgoing_account:
        class: AppBundle\Admin\AccountAdmin
        arguments: [~, AppBundle\Entity\OutgoingAccount, AppBundle\Controller\Admin\AccountController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Outgoing Accounts' }
        public: true

    app.admin.client_account:
        class: AppBundle\Admin\ClientAccountAdmin
        arguments: [~, AppBundle\Entity\ClientAccount, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Client Accounts' }
        public: true

    app.admin.invoice:
        class: AppBundle\Admin\InvoiceAdmin
        arguments: [~, AppBundle\Entity\Invoice, AppBundle\Controller\Admin\InvoiceController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: Invoices }
        public: true

    app.admin.monetary_transaction:
        class: AppBundle\Admin\MonetaryTransactionAdmin
        arguments: [~, AppBundle\Entity\MonetaryTransaction, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Transactions' }
        public: true

    app.admin.withdraw:
        class: AppBundle\Admin\WithdrawAdmin
        arguments: [~, AppBundle\Entity\Withdraw, AppBundle\Controller\Admin\WithdrawController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: Withdrawal }
        public: true
        calls:
            - [setHoldManager, ['@AppBundle\Service\HoldManager']]

    app.admin.trade:
        class: AppBundle\Admin\TradeAdmin
        arguments: [~, AppBundle\Entity\Trade, AppBundle\Controller\Admin\TradeController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: exchange, label: Trades }
        public: true

    Sonata\DoctrineORMAdminBundle\Model\ModelManager: '@sonata.admin.manager.orm'

    AppBundle\Service\LeadManager:
        arguments:
            $leadCost: '%lead_cost%'
            $starCost: '%star_cost%'
            $leadExpirationPeriod: '%lead_expiration_period%'

    AppBundle\Service\Uploader:
        arguments:
            $storePath: '%upload_store_path%'

    AppBundle\Twig\TemplateExtension:
        public: false
        tags: ['twig.extension']

    AppBundle\Imagine\Filter\Loader\EllipseMaskFilter:
        tags:
            - { name: 'liip_imagine.filter.loader', loader: ellipse_mask_filter }