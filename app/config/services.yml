imports:
    - { resource: "@NotificationBundle/Resources/config/services.yml" }

# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests,Form/EventListener}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    AppBundle\Controller\API\v1\UploadController:
        arguments:
            $uploadMaxSize: '%upload_max_size%'
            $audioAllowedTypes: '%audio_allowed_types%'
            $audioMaxSize: '%audio_max_size%'

    AppBundle\EventListener\SecuritySubscriber:
        tags: ['kernel.event_subscriber']

    AppBundle\EventListener\SelectTypeSubscriber:
        arguments:
            $firewallMap: '@security.firewall.map'
        tags: ['kernel.event_subscriber']

    AppBundle\EventListener\ReferrerTokenListener:
        tags: ['kernel.event_subscriber']

    AppBundle\EventListener\TradeSubscriber:
        arguments:
            $fosComposer: '@fos_message.composer.default'
            $fosSender: '@fos_message.sender.default'
        tags: ['kernel.event_subscriber']

    AppBundle\Security\Voter\LeadCreateVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\LeadViewVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\LeadEditVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\LeadBuyVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\TradeVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\CompanyVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\RoomVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\MemberVoter:
        tags: ['security.voter']

    AppBundle\Security\Voter\PhoneCallVoter:
        tags: ['security.voter']

    app.admin.user:
        class: AppBundle\Admin\UserAdmin
        arguments: [~, AppBundle\Entity\User, AppBundle\Controller\Admin\UserController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Users }
        public: true
        calls:
            - [setUserManager, ['@AppBundle\Service\UserManager']]
            - [setAccountManager, ['@AppBundle\Service\AccountManager']]
    
    app.admin.country:
        class: AppBundle\Admin\CountryAdmin
        arguments: [~, AppBundle\Entity\Country, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Countries }
        public: true

    app.admin.region:
        class: AppBundle\Admin\RegionAdmin
        arguments: [~, AppBundle\Entity\Region, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Regions }
        public: true
    
    app.admin.city:
        class: AppBundle\Admin\CityAdmin
        arguments: [~, AppBundle\Entity\City,~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Cities }
        public: true
    
    app.admin.property:
        class: AppBundle\Admin\PropertyAdmin
        arguments: [~, AppBundle\Entity\Property,~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Properties }
        public: true

    app.admin.account:
        class: AppBundle\Admin\AccountAdmin
        arguments: [~, AppBundle\Entity\Account, AppBundle\Controller\Admin\AccountController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: Accounts }
        public: true

    app.admin.income_account:
        class: AppBundle\Admin\AccountAdmin
        arguments: [~, AppBundle\Entity\IncomeAccount, AppBundle\Controller\Admin\AccountController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Income Accounts' }
        public: true

    app.admin.outgoing_account:
        class: AppBundle\Admin\AccountAdmin
        arguments: [~, AppBundle\Entity\OutgoingAccount, AppBundle\Controller\Admin\AccountController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Outgoing Accounts' }
        public: true

    app.admin.client_account:
        class: AppBundle\Admin\ClientAccountAdmin
        arguments: [~, AppBundle\Entity\ClientAccount, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Client Accounts' }
        public: true

    app.admin.invoice:
        class: AppBundle\Admin\InvoiceAdmin
        arguments: [~, AppBundle\Entity\Invoice, AppBundle\Controller\Admin\InvoiceController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: Invoices }
        public: true

    app.admin.monetary_transaction:
        class: AppBundle\Admin\MonetaryTransactionAdmin
        arguments: [~, AppBundle\Entity\MonetaryTransaction, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: 'Transactions' }
        public: true

    app.admin.withdraw:
        class: AppBundle\Admin\WithdrawAdmin
        arguments: [~, AppBundle\Entity\Withdraw, AppBundle\Controller\Admin\WithdrawController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: financial, label: Withdrawal }
        public: true
        calls:
            - [setHoldManager, ['@AppBundle\Service\HoldManager']]

    app.admin.trade:
        class: AppBundle\Admin\TradeAdmin
        arguments: [~, AppBundle\Entity\Trade, AppBundle\Controller\Admin\TradeController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: exchange, label: Trades }
        public: true
    
    app.admin.thread:
        class: AppBundle\Admin\ThreadAdmin
        arguments: [~, AppBundle\Entity\Thread, AppBundle\Controller\Admin\ThreadController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: exchange, label: Arbitration and Support }
        public: true

    app.admin.phone_call:
        class: AppBundle\Admin\PhoneCallAdmin
        arguments: [~, AppBundle\Entity\PhoneCall, AppBundle\Controller\Admin\PhoneCallController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: telephony, label: PhoneCalls }
        public: true

    app.admin.user_delete_request:
        class: AppBundle\Admin\UserDeleteRequestAdmin
        arguments: [~, AppBundle\Entity\UserDeleteRequest, AppBundle\Controller\Admin\UserDeleteRequestController ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: UserDeleteRequests }
        public: true

    app.admin.room:
        class: AppBundle\Admin\RoomAdmin
        arguments: [~, AppBundle\Entity\Room, AppBundle\Controller\Admin\RoomController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Room }
        public: true
        calls:
            - [setRoomManager, ['@AppBundle\Service\RoomManager']]

    app.admin.lead:
        class: AppBundle\Admin\LeadAdmin
        arguments: [~, AppBundle\Entity\Lead, AppBundle\Controller\Admin\LeadController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: exchange, label: Lead }
        public: true

    app.admin.member:
        class: AppBundle\Admin\MemberAdmin
        arguments: [~, AppBundle\Entity\Member, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: main, label: Member }
        public: true

    Sonata\DoctrineORMAdminBundle\Model\ModelManager: '@sonata.admin.manager.orm'

    AppBundle\Service\LeadManager:
        arguments:
            $leadCost: '%lead_cost%'
            $starCost: '%star_cost%'
            $leadPerUser: '%lead_per_user%'

    AppBundle\Service\PhoneCallManager:
        arguments:
            $pbxCallUrl: '%pbx_call_url%'
            $costPerSecond: '%cost_per_second%'
            $talkTimeout: '%talk_timeout%'
            $hangupTimeout: '%hangup_timeout%'
            $maxAsksCallback: '%max_asks_callback%'
            $telephonyEnabled: '%telephony_enabled%'

    AppBundle\Service\PBXCallbackManager:
        arguments:
            $minTalkDuration: '%min_talk_duration%'

    AppBundle\Service\FeesManager:
        arguments:
            $tradeBuyerFee: '%trade_buyer_fee%'
            $tradeSellerFee: '%trade_seller_fee%'

    AppBundle\Service\TradeManager:
        arguments:
            $maxAsksCallback: '%max_asks_callback%'

    AppBundle\Service\ReferrerRewardManager:
        arguments:
            $rewardInterest: '%referrer_reward%'

    AppBundle\Service\WithdrawManager:
        arguments:
            $minimalAmount: '%minimal_withdraw%'

    AppBundle\Service\Uploader:
        arguments:
            $storePath: '%upload_store_path%'

    GuzzleHttp\Client: ~

    AppBundle\Twig\TemplateExtension:
        public: false
        tags:
            - { name: 'twig.extension' }

    AppBundle\Imagine\Filter\Loader\EllipseMaskFilter:
        tags:
            - { name: 'liip_imagine.filter.loader', loader: ellipse_mask_filter }

    app.user_to_username_transformer:
        class: AppBundle\Form\DataTransformer\UserToUsernameTransformer
        arguments:
            - doctrine

    fos_user.user_to_username_transformer:
        alias: app.user_to_username_transformer

    app.security.token_user_provider:
        class: Symfony\Bridge\Doctrine\Security\User\EntityUserProvider
        arguments:
            $classOrAlias: AppBundle\Entity\User
            $property: 'token'

    AppBundle\Security\AccessTokenAuthenticator:
        arguments:
            $userProvider: '@app.security.token_user_provider'

    AppBundle\Security\AuthenticationFailureHandler:
        arguments:
            $httpUtils: '@security.http_utils'

    AppBundle\Security\BannedChecker:
        arguments:
            $timeFrame: '%auth_time_frame%'
            $retryLimit: '%auth_fail_retry%'

    AppBundle\Controller\ArbitrationController:
        arguments:
            $composer: '@fos_message.composer.default'
            $sender: '@fos_message.sender.default'
            $messageLimitInMinute: '%message_limit_in_minute%'

    AppBundle\Controller\API\v1\SupportController:
        arguments:
            $threadManager: '@fos_message.thread_manager.default'

    AppBundle\Controller\API\v1\PaymentController:
        arguments:
            $paymentGatewayToken: '%payment_gateway_token%'

    AppBundle\Command\ArchiveStaledLeadsCommand:
        arguments:
            $ttl: '%stale_after_hours%'

    AppBundle\Command\AutoFinishTradesCommand:
        arguments:
            $staleAfterHours: '%stale_after_hours%'

    AppBundle\Validator\Constraints\UniqueLeadValidator:
        tags:
            - { name: validator.constraint_validator }

    AppBundle\Notifications\EmailNotificationContainer:
        arguments:
            $client: '@notification_bundle.email_client'