<?php

namespace NotificationBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\QueryBuilder;
use NotificationBundle\Entity\Notification;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends ServiceEntityRepository
{
    /**
     * NotificationRepository constructor.
     *
     * @param ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Notification::class);
    }

    /**
     * @param User $user
     *
     * @return int
     */
    public function getNewCountForUser(User $user): int
    {
        $queryBuilder = $this->createQueryBuilder('l');

        $queryBuilder
            ->select('COUNT(l.id)')
            ->where('l.user = :user')
            ->setParameter('user', $user);

        $this->addReadStatusCondition($queryBuilder, Notification::READ_STATUS_NEW);

        try {
            $query = $queryBuilder->getQuery();
            return $query->getSingleScalarResult();
        } catch (\Exception $exception) {
            return 0;
        }
    }

    /**
     * @param User $user
     * @param int  $limit
     *
     * @return Notification[]
     */
    public function getForUser(User $user, int $limit = 30): array
    {
        $queryBuilder = $this->createQueryBuilder('l');

        $queryBuilder
            ->where('l.user = :user')
            ->setParameter('user', $user)
            ->orderBy('l.createdAt', 'DESC')
            ->setMaxResults($limit);

        return $queryBuilder->getQuery()->getArrayResult();
    }

    /**
     * @param QueryBuilder $queryBuilder
     * @param string       $readStatus
     */
    private function addReadStatusCondition(QueryBuilder $queryBuilder, string $readStatus)
    {
        $queryBuilder
            ->andWhere('l.readStatus = :readStatus')
            ->setParameter('readStatus', $readStatus);
    }
}
