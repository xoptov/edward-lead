<?php

namespace NotificationBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\QueryBuilder;
use NotificationBundle\Entity\Notification;
use Symfony\Component\Security\Core\Security;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends ServiceEntityRepository
{
    /**
     * @var Security
     */
    private $security;

    /**
     * NotificationRepository constructor.
     *
     * @param ManagerRegistry $registry
     * @param Security        $security
     */
    public function __construct(ManagerRegistry $registry, Security $security)
    {
        parent::__construct($registry, Notification::class);
        $this->security = $security;
    }

    /**
     * @return int
     * @throws NonUniqueResultException
     */
    public function getNewForCurrentUserCount(): int
    {
        /** @var User $user */
        $user = $this->security->getUser();

        $queryBuilder = $this->createQueryBuilder('l');

        $queryBuilder
            ->select('COUNT(l.id)')
            ->where('l.user = :user')
            ->setParameter('user', $user);

        $this->addReadStatusCondition($queryBuilder, [Notification::READ_STATUS_NEW]);

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * @param int $limit
     *
     * @return Notification[]
     */
    public function getForCurrentUser(int $limit = 30): array
    {
        /** @var User $user */
        $user = $this->security->getUser();

        $queryBuilder = $this->createQueryBuilder('l');

        $queryBuilder
            ->where('l.user = :user')
            ->setParameter('user', $user)
            ->orderBy('l.createdAt', 'DESC')
            ->setMaxResults($limit);

        return $queryBuilder->getQuery()->getArrayResult();
    }

    /**
     * @param QueryBuilder $queryBuilder
     * @param array        $readStatus
     */
    private function addReadStatusCondition(QueryBuilder $queryBuilder, array $readStatus)
    {
        $queryBuilder
            ->andWhere('l.readStatus = :readStatus')
            ->setParameter('readStatus', $readStatus);
    }

    /**
     * @param string $type
     *
     * @return string
     */
    public function getViewType(string $type): string
    {
        switch ($type) {
            case Notification::TYPE_IMPORTANT:
                return 'Важное';
            case Notification::TYPE_NEWS:
                return 'Новости';
            case Notification::TYPE_NOTIFICATION:
                return 'Уведомление';
        }
    }
}
